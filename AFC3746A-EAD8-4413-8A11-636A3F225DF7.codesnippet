<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//
//  ToogleView.swift
//  DependencyInjections
//
//  Created by Minh.Thang on 9/20/19.
//  Copyright © 2019 Minh.Thang. All rights reserved.
//

import Foundation


//
//  ToggleViewProtocol.swift
//  Hosee
//
//  Created by Minh Thang on 4/16/19.
//  Copyright © 2019 Minh Thang. All rights reserved.
//

import UIKit

@objc
protocol ToggleViewProtocol: class {
    var controlConstraint: NSLayoutConstraint! {get set}
    var corverButton: UIButton! {get set}
    var menu: UIView! {get set}
    var effectView: UIVisualEffectView? {get set}
    var closeDistance: CGFloat {get set}
    var showDistance: CGFloat {get set}
    var isOpen: Bool {get set}
    var view: UIView! {get set}
    var coverAlpha: CGFloat {get set}
    
}

class ContainerViewController: UIViewController, ToggleViewProtocol {
    @IBOutlet var controlConstraint: NSLayoutConstraint!
    
    @IBOutlet var corverButton: UIButton!
    
    @IBOutlet var menu: UIView!
    
    @IBOutlet var effectView: UIVisualEffectView?
    
    var closeDistance: CGFloat = UIScreen.main.bounds.width * 0.8
    
    var showDistance: CGFloat = 0
    
    var isOpen: Bool =  true {
        didSet {
            performToggle(isOpen: isOpen)
        }
    }
    
    var coverAlpha: CGFloat = 0.8
    
    @IBAction func toggle(_ sender: Any) {
        isOpen = !isOpen
    }
    
    func registerNotification() {
        NotificationCenter.default.addObserver(self, selector: #selector(toggle(_:)), name: .toggleMenu, object: nil)
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
}


class  HomeViewController : UIViewController {
    @IBAction func onClickedMenu(_ sender: Any) {
        NotificationCenter.default.post(name: .toggleMenu, object: nil, userInfo: nil)
    }
}


extension ToggleViewProtocol {
    
    func performToggle(isOpen: Bool) {
        self.controlConstraint.constant = self.isOpen ? self.showDistance :  -self.closeDistance - 20
        self.corverButton.alpha = self.isOpen ? self.coverAlpha : 0
        self.effectView?.alpha = self.isOpen ? self.coverAlpha : 0
        UIView.animate(withDuration: 0.35) {
            
            self.view.layoutIfNeeded()
        }
    }
    func setupToggleView(distance: CGFloat) {
        closeDistance = distance
        isOpen = false
        setupShowingView()
        controlConstraint.constant =  -closeDistance - 20
        corverButton.alpha = 0
        effectView?.alpha = 0
        view.layoutIfNeeded()
    }
    
    private func setupShowingView() {
        menu.shadowColor = UIColor.black
        menu.shadowRadius = 20
        menu.shadowOpacity = 0.7
        menu.shadowOffset = CGSize(width: 0, height: 0)
    }
    
    
    
    
}

extension Notification.Name {
    static let toggleMenu  = Notification.Name("toggleMenuDidTap")
    
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>AFC3746A-EAD8-4413-8A11-636A3F225DF7</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Generic</string>
	<key>IDECodeSnippetTitle</key>
	<string>Toggle View Protocol </string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
