<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>
typealias JSON = [String : Any]

extension UserDefaults {
    func load&lt;T: Codable&gt;(withKey key: String, type: T.Type) -&gt; T? {
        let userDefault = UserDefaults.standard
        switch type {
        case is String.Type:
            return userDefault.string(forKey: key) as? T
        case is Int.Type:
            return userDefault.integer(forKey: key) as? T
        case is Double.Type:
            return userDefault.double(forKey: key) as? T
        case is Float.Type:
            return userDefault.float(forKey: key) as? T
        case is Data.Type:
            return userDefault.data(forKey: key) as? T
        case is URL.Type:
            return  userDefault.url(forKey: key) as? T
        case is [String].Type:
            return userDefault.stringArray(forKey: key) as? T
        case is Bool.Type:
            return userDefault.bool(forKey: key) as? T
            
        default:
            if let data = userDefault.object(forKey: key) as? Data {
                return try? JSONDecoder().decode(T.self, from: data)
            } else {
                return nil
            }
        }
        
    }
    
    func save&lt;T:Codable&gt;(withKey key: String, value: T?) -&gt; Bool {
        guard let value = value else {return false}
        let userDefault = UserDefaults.standard
        switch value {
        case is String:
            userDefault.set( value as! String, forKey: key)
        case is Int:
            userDefault.set( value as! Int, forKey: key)
        case is Double:
            userDefault.set( value as! Double, forKey: key)
        case is Float:
            userDefault.set( value as! Float, forKey: key)
        case is Data:
            userDefault.set( value as! Data, forKey: key)
        case is URL:
            userDefault.set( value as? URL, forKey: key)
        case is [String]:
            userDefault.set( value as! [String], forKey: key)
        case is Bool:
            userDefault.set( value as! Bool, forKey: key)
            
        default:
            if let encodeData = try? JSONEncoder().encode(value) {
                userDefault.set(encodeData, forKey: key)
            } else {
                
            }
        }
        UserDefaults.standard.synchronize()
        return true
        
    }
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>E2AABB3A-76FF-48AF-8238-92AEAA5F4EDF</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetTitle</key>
	<string>Save and Load from UserDefaults</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
